---
# Docker-Host Role: Installation und Konfiguration von Docker

# Voraussetzungen
- name: Installiere erforderliche Pakete für Docker (Debian/Ubuntu)
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - software-properties-common
    state: present
    update_cache: true
  when: ansible_os_family == "Debian"
  tags:
    - docker
    - packages

- name: Installiere erforderliche Pakete für Docker (RedHat/CentOS)
  ansible.builtin.yum:
    name:
      - ca-certificates
      - curl
      - gnupg
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
    state: present
  when: ansible_os_family == "RedHat"
  tags:
    - docker
    - packages

# Docker-Repository hinzufügen
- name: Füge Docker GPG-Schlüssel hinzu (Debian/Ubuntu)
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
    state: present
  when: ansible_os_family == "Debian"
  tags:
    - docker
    - repository

- name: Füge Docker-Repository hinzu (Debian/Ubuntu)
  ansible.builtin.apt_repository:
    repo: "{{ docker_apt_repository }}"
    state: present
    update_cache: true
  when: ansible_os_family == "Debian"
  tags:
    - docker
    - repository

- name: Füge Docker-Repository hinzu (RedHat/CentOS)
  ansible.builtin.yum_repository:
    name: docker-ce
    description: Docker CE Repository
    baseurl: "https://download.docker.com/linux/{{ dist_path_component }}/$releasever/$basearch/stable"
    gpgcheck: true
    gpgkey: "https://download.docker.com/linux/{{ dist_path_component }}/gpg"
    enabled: true
  vars:
    dist_path_component: "{{ 'fedora' if ansible_distribution == 'Fedora' else ('rhel' if ansible_distribution in ['RedHat Enterprise Linux', 'RHEL'] else (ansible_distribution | lower)) }}"
  when: ansible_os_family == "RedHat"
  tags:
    - docker
    - repository

# Docker Installation
- name: Installiere Docker CE (Debian/Ubuntu)
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
    update_cache: true
  when: ansible_os_family == "Debian"
  notify: restart docker
  tags:
    - docker
    - install

- name: Installiere Docker CE (RedHat/CentOS)
  ansible.builtin.yum:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
  when: ansible_os_family == "RedHat"
  notify: restart docker
  tags:
    - docker
    - install

# Docker Service konfigurieren
- name: Erstelle Docker-Konfigurationsverzeichnis
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: '0755'
  tags:
    - docker
    - config

- name: Konfiguriere Docker-Daemon
  ansible.builtin.template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: '0644'
  notify: restart docker
  tags:
    - docker
    - config

- name: Aktiviere und starte Docker-Service
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true
  tags:
    - docker
    - service

# Docker Compose installieren
- name: Lade Docker Compose herunter
  ansible.builtin.get_url:
    url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-{{ ansible_system | lower }}-{{ 'aarch64' if ansible_architecture == 'aarch64' else 'x86_64' }}"
    dest: /usr/local/bin/docker-compose
    mode: '0755'
  tags:
    - docker
    - compose

# Docker Benutzer konfigurieren
- name: Erstelle Docker-Gruppe
  ansible.builtin.group:
    name: docker
    state: present
  tags:
    - docker
    - users

- name: Füge Benutzer zur Docker-Gruppe hinzu
  ansible.builtin.user:
    name: "{{ item }}"
    groups: docker
    append: true
  loop: "{{ docker_users }}"
  tags:
    - docker
    - users

# Docker Cleanup-Cronjob
- name: Erstelle Docker-Cleanup-Cronjob
  ansible.builtin.cron:
    name: "Docker Prune"
    user: root
    hour: "1"
    minute: "30"
    job: "docker system prune -af --volumes > /dev/null 2>&1"
  tags:
    - docker
    - maintenance
